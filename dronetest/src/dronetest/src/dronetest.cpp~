#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <sensor_msgs/image_encodings.h>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include "opencv2/opencv.hpp"
#include <stdio.h>
#include <iostream>
#include <math.h>

#include<fstream>

using namespace std;
using namespace cv;

static const char WINDOW[]="Old Image";
static const char WINDOW2[]="New Image";
const int MAX_CORNERS = 500;
const double pi = 3.1415926;

void process(const sensor_msgs::ImageConstPtr& cam_image){
cv_bridge::CvImagePtr cv_ptr;
try
{
  cv_ptr = cv_bridge::toCvCopy(cam_image,sensor_msgs::image_encodings::BGR8);
}

catch (cv_bridge::Exception& e)
{
  ROS_ERROR("cv_bridge exception:%s",e.what());
  return;
}


Mat img_rgb = cv_ptr->image;
Mat img_gray;

cvtColor(img_rgb,img_gray,CV_RGB2GRAY);
IplImage imgSave = IplImage(img_rgb);

IplImage imgnew= IplImage(img_gray);
IplImage* imgNew = &imgnew;
IplImage* imgOld = cvLoadImage("/opt/pic/1.jpg",CV_LOAD_IMAGE_GRAYSCALE);
IplImage* imgC = cvLoadImage("/opt/pic/1.jpg",CV_LOAD_IMAGE_UNCHANGED);


 /* Define the ROI
         a-b
         | |
         d-c
         */
        int width = imgOld->width;
        int height = imgOld->height;
        CvPoint a = cvPoint  (width/3    ,   height/3);
        CvPoint b = cvPoint  (2*width/3,   height/3);
        CvPoint c = cvPoint  (2*width/3,   2*height/3);
        CvPoint d = cvPoint  (width/3  ,   2*height/3);
        
        CvRect Roi= cvRect(a.x  ,   a.y, b.x-a.x,   c.y-b.y);
        
        
       
        
        cvSetImageROI(imgOld, Roi);
        cvSetImageROI(imgNew, Roi);
        

CvSize      img_sz    = cvGetSize( imgOld );
	int         win_size = 10;
	
	
	// The first thing we need to do is get the features
	// we want to track.
	//
	IplImage* eig_image = cvCreateImage( img_sz, IPL_DEPTH_32F, 1 );
	IplImage* tmp_image = cvCreateImage( img_sz, IPL_DEPTH_32F, 1 );
	int              corner_count = MAX_CORNERS;
	CvPoint2D32f* cornersA        = new CvPoint2D32f[ MAX_CORNERS ];
	cvGoodFeaturesToTrack(
		imgOld,
		eig_image,
		tmp_image,
		cornersA,
		&corner_count,
		0.01,
		5.0,
		0,
		3,
		0,
		0.04
	);
	cvFindCornerSubPix(
		imgOld,
		cornersA,
		corner_count,
		cvSize(win_size,win_size),
		cvSize(-1,-1),
		cvTermCriteria(CV_TERMCRIT_ITER|CV_TERMCRIT_EPS,20,0.03)
	);
	// Call the Lucas Kanade algorithm
	//
	char features_found[ MAX_CORNERS ];
	float feature_errors[ MAX_CORNERS ];
 	CvSize pyr_sz = cvSize( b.x-a.x+8, (c.y-b.y)/3 );

	IplImage* pyrA = cvCreateImage( pyr_sz, IPL_DEPTH_32F, 1 );
  IplImage* pyrB = cvCreateImage( pyr_sz, IPL_DEPTH_32F, 1 );
  CvPoint2D32f* cornersB        = new CvPoint2D32f[ MAX_CORNERS ];
  cvCalcOpticalFlowPyrLK(
     imgOld,
     imgNew,
     pyrA,
     pyrB,
     cornersA,
     cornersB,
     corner_count,
     cvSize( win_size,win_size ),
     5,
     features_found,
     feature_errors,
     cvTermCriteria( CV_TERMCRIT_ITER | CV_TERMCRIT_EPS, 20, .3 ),
     0
  );
  // Now make some image of what we are looking at:
  //
  for( int i=0; i<corner_count; i++ ) {
     if( features_found[i]==0|| feature_errors[i]>550 ) {
 //       printf("Error is %f/n",feature_errors[i]);
        continue;
     }
 //    printf("Got it/n");
      CvPoint p0 = cvPoint(
                                 cvRound( cornersA[i].x + a.x ),
                                 cvRound( cornersA[i].y + a.y)
                                 );
      CvPoint p1 = cvPoint(
                                 cvRound( cornersB[i].x +  a.x ),
                                 cvRound( cornersB[i].y + a.y)
                                 );
     cvLine( imgC, p0, p1, CV_RGB(255,0,0),1 );

 if(pow((p0.x-p1.x),2)+pow((p0.y-p1.y),2) < 5||pow((p0.x-p1.x),2)+pow((p0.y-p1.y),2)>10000) continue;
            cvLine( imgC, p0, p1, CV_RGB(255,0,0),1);
            
            //画箭头
            double angle;
            angle = atan2( (double) p0.y - p1.y, (double) p0.x - p1.x );//线段pq的坡角大小
            p0.x = (int) (p1.x + 5 * cos(angle + pi/6));
            p0.y = (int) (p1.y + 5* sin( angle + pi/6));//获得短线1起点x,y
            // cout<<"p0.x="<<p0.x<<" p0.y="<<p0.y<<"p1.x="<<p1.x<<" p1.y="<<p1.y<<endl;
            // cout<<angle<<endl;
            cvLine( imgC, p0, p1, CV_RGB(255,0,0),1 );//以q为终点绘制第一条箭头短线
            p0.x = (int) (p1.x + 5  * cos(angle - pi / 6));//箭头下短线2，角度为pq角度减少pi/4,长度为9
            p0.y = (int) (p1.y + 5 * sin(angle - pi / 6));//获得短线2起点x,y
            cvLine( imgC, p0, p1, CV_RGB(255,0,0),1 );//画下第二条箭头短线
  }

  	cvLine(imgC, a, b, cvScalar(255,0,0));
        cvLine(imgC, b, c, cvScalar(255,0,0));
        cvLine(imgC, c, d, cvScalar(255,0,0));
        cvLine(imgC, d, a, cvScalar(255,0,0));
 
  cvShowImage("LKpyr_OpticalFlow",imgC);




//save the frames
        char address[]="/home/e1125/pic/";
        char num[8];
        char suffix[8]=".jpg";
        char name[100];
        int number =1;
	
        
        sprintf(num,"%d",number);
        sprintf(name,"%s%s%s",address,num,suffix);
      
        cvSaveImage(name, &imgSave);//save the rgb_image

//cvShowImage(WINDOW,imgOld);
//cvShowImage(WINDOW2,imgNew);

	//cvReleaseData(imgOld);
       //cvReleaseData(imgNew);
	//cvReleaseData(imgC);
        cvReleaseData(pyrA);
        cvReleaseData(pyrB);
        cvReleaseData(eig_image);
        cvReleaseData(tmp_image);

cvWaitKey(33);
}

int main(int argc, char **argv){
ros::init(argc,argv,"droneTest");
ros::NodeHandle n;
ros::Rate r(100);

image_transport::ImageTransport it(n);
image_transport::Subscriber image_sub = it.subscribe("/ardrone/image_raw",1,process);

while (ros::ok())
{
  ros::spinOnce();                 
  r.sleep();
}

cvNamedWindow("LKpyr_OpticalFlow",0);
//cv::namedWindow(WINDOW);
//cv::namedWindow(WINDOW2);

return 0;
}
