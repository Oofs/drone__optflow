#include <unistd.h>
#include <curses.h>
#include <fstream>
#include <math.h>
#include <iomanip>


#include "std_msgs/Int64MultiArray.h"
#include "std_msgs/Float64MultiArray.h"
#include "grey_his.h"

#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <sensor_msgs/image_encodings.h>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/opencv.hpp"


using namespace std;
using namespace cv;

grey_his::grey_his(){
	 
	
	image_transport::ImageTransport it(n_his);
	//the constructor of ImageTransport() doesn't exist... so have to use ImageTransport(node)
        image_sub = it.subscribe("/ardrone/image_raw",1,&grey_his::image_Cb,this);
	
}

grey_his::~grey_his(void){}






void grey_his::image_Cb(const sensor_msgs::ImageConstPtr& cam_image)
{


	cv_bridge::CvImagePtr cv_ptr;
try
{
  cv_ptr = cv_bridge::toCvCopy(cam_image,sensor_msgs::image_encodings::BGR8);
}

catch (cv_bridge::Exception& e)
{
  ROS_ERROR("cv_bridge exception:%s",e.what());
  return;
}

	
    Mat img_rgb = cv_ptr->image;
    Mat img_grey;
    cvtColor(img_rgb,img_gray,CV_RGB2GRAY);
    
    IplImage frame = IplImage(img_grey);
	    
    IplImage* grey;
    IplImage* hist_img;
    
   
    grey = &frame;
    
    
    
    int grey_bins = 50;
    int scale = 5;
    hist_img = cvCreateImage(cvSize(scale*grey_bins, 300), 8, 3);
    
    CvHistogram* hist;{
        int hist_size[]={grey_bins};
        float g_range[] = {0,255};
        float* ranges[] = {g_range};
        hist = cvCreateHist(1, hist_size, CV_HIST_ARRAY,ranges,1);
    }
    
    cvCalcHist(&grey, hist,0,0);
    
    
    cvRectangle(hist_img, cvPoint(0, 0), cvPoint(hist_img->width, hist_img->height), CV_RGB(255,255,255),CV_FILLED);
    
    float max_value = 0;
    float sum=0;
    cvGetMinMaxHistValue(hist, 0, &max_value,0,0);
    for(int i =0;i<grey_bins;i++){
        sum += hist->mat.data.fl[i];
        
    }
    
    for( int h = 0; h < grey_bins; h++ ) {
        
        float bin_val = hist->mat.data.fl[h];
        
        
        int intensity = cvRound( bin_val*300/sum );
        cvRectangle(
                    hist_img,
                    cvPoint( h*scale, hist_img->height-1),
                    cvPoint( (h+1)*scale - 1, hist_img->height-intensity),
                    cvScalar((int)h*255/grey_bins,(int)h*255/grey_bins,(int)h*255/grey_bins),
                    CV_FILLED
                    );
        
    }
  cvNamedWindow("Grey_histogram");
 cvShowImage("Grey_histogram", hist_img);
    cvNamedWindow("grey");
    cvShowImage("grey", grey);

       // cvReleaseData(grey);
      //  cvReleaseData(&frame);
      //  cvReleaseData(hist_img);
    
        
        
        
      


}






